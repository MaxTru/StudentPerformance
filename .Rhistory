sim_data$values = rnorm(n, mean = 42, sd = 3.5)
s = summary(lm(values ~ groups, data = sim_data))
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE)
s$coefficients[2,3]
test$statistic
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE)
test$statistic
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE, alt="l")
test$statistic
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE, alt="less")
test$statistic
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE, alt="greater")
test$statistic
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE, alt="two.sided")
test$statistic
s$coefficients[2,3]
lm(values ~ groups, data = sim_data, singular.ok = FALSE)
s$coefficients[2,3]
s= summary(lm(values ~ groups, data = sim_data, singular.ok = FALSE))
s$coefficients[2,3]
s= summary(lm(values ~ groups, data = sim_data, singular.ok = TRUE))
s$coefficients[2,3]
options(scipen = 1, digits = 4, width = 80, fig.alin = "center")
epa2015 = read.csv("epa2015.csv")
str(epa2015)
(types = levels(epa2015$type))
plot_colors = c(2,3,4)
plot_CO2_vs_horse = function() {
plot(CO2 ~ horse, epa2015, xlab = "Horse power (ft-lb/s)",
ylab = "CO2 (g/mi)", main = "CO2 vs. Horse power", col = plot_colors[type])
legend("topleft", types, cex = 0.75, pch=1, col=plot_colors)
}
fit = lm(CO2 ~ horse, data = epa2015)
plot_CO2_vs_horse()
abline(fit, lwd=3, col="darkorange")
coef(fit)[2]
predict(fit, interval="prediction", level=0.9, newdata=data.frame(horse=148, type="Both"))
fit = lm(CO2 ~ horse + type, data = epa2015)
int_both = coef(fit)[1]
int_car = coef(fit)[1] + coef(fit)[3]
int_truck = coef(fit)[1] + coef(fit)[4]
slope_all = coef(fit)[2]
plot_CO2_vs_horse()
abline(int_both, slope_all, lwd=2, lty=1, col=plot_colors[1])
abline(int_car, slope_all, lwd=2, lty=2, col=plot_colors[2])
abline(int_truck, slope_all, lwd=2, lty=3, col=plot_colors[3])
coef(fit)[2]
predict(fit, level=0.9, interval="prediction", newdata=data.frame(horse=148,type="Both"))
fit = lm(CO2 ~ horse * type, data = epa2015)
int_both = coef(fit)[1]
int_car = coef(fit)[1] + coef(fit)[3]
int_truck = coef(fit)[1] + coef(fit)[4]
slope_both = coef(fit)[2]
slope_car = coef(fit)[2] + coef(fit)[5]
slope_truck = coef(fit)[2] + coef(fit)[6]
plot_CO2_vs_horse()
abline(int_both, slope_both, lwd=2, lty=1, col=plot_colors[1])
abline(int_car, slope_car, lwd=2, lty=2, col=plot_colors[2])
abline(int_truck, slope_truck, lwd=2, lty=3, col=plot_colors[3])
coef(fit)[2] + coef(fit)[5]
predict(fit, level=0.9, interval="prediction", newdata=data.frame(horse=148, type="Both"))
add_mod = lm(CO2 ~ horse + type, data = epa2015)
int_mod = lm(CO2 ~ horse * type, data = epa2015)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
hospital = read.csv("hospital.csv")
str(hospital)
levels(hospital$Education)
levels(hospital$Income)
levels(hospital$Sex)
add_mod = lm(Blood ~ Age + Education + Income + Sex, data = hospital)
names(add_mod$coefficients)
int_mod = lm(Blood ~ Age + Education + Income + Sex + (Sex*Age) + (Sex*Income), data = hospital)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
int_mod2 = lm(Blood ~ Age + Education + Income + Sex + (Sex*Age) + (Sex*Income) + (Income*Age) + (Age*Income*Sex),
data = hospital)
p_val = anova(add_mod, int_mod2)$`Pr(>F)`[2]
coef(int_mod2)
v = sum(coef(int_mod2)[c(2,6,8,9)])
days_add = lm(Days ~ Pressure + Blood + Rate, data = hospital)
days_int = lm(Days ~ Pressure * Blood * Rate, data = hospital)
analysis = anova(days_add, days_int)
F_val = analysis$F[2]
p_val = analysis$`Pr(>F)`[2]
n = 30
sim_data = data.frame(
groups = c(rep("A", n / 2), rep("B", n / 2)),
values = rep(0, n))
str(sim_data)
set.seed(420)
sim_data$values = rnorm(n, mean = 42, sd = 3.5) # simulate response data
summary(lm(values ~ groups, data = sim_data))
t.test(values ~ groups, data = sim_data, var.equal = TRUE)
num_sims = 300
lm_t = rep(0, num_sims)
lm_p = rep(0, num_sims)
tt_t = rep(0, num_sims)
tt_p = rep(0, num_sims)
set.seed(19840304)
for (i in 1:num_sims) {
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
s = summary(lm(values ~ groups, data = sim_data))
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE)
lm_t[i] = s$coefficients[2,3]
lm_p[i] = s$coefficients[2,4]
tt_t[i] = test$statistic
tt_p[i] = test$p.value
}
View(sim_data)
mean(sim_data$values[sim_data$groups == 'A',])
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
mean(sim_data$values[sim_data$groups == 'A'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
mean(sim_data$values[sim_data$groups == 'A'])
mean(sim_data$values[sim_data$groups == 'B'])
---
title: "Week 7 - Homework"
author: "STAT 420, Summer 2018, Rafal Tytyk (rtytyk2)"
date: '2019-06-29'
output:
html_document:
toc: yes
theme: simplex
pdf_document: default
urlcolor: cyan
---
3.5/sqrt(15)
meanA = mean(sim_data$values[sim_data$groups == 'A'])
meanB = mean(sim_data$values[sim_data$groups == 'B'])
(meanA-meanB) / (3.5/sqrt(15))
s = summary(lm(values ~ groups, data = sim_data))
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE)
(meanA-meanB) / (3.5/sqrt(15))
s$coefficients[2,3]
s$coefficients[2,4]
test$statistic
test$p.value
(meanA-meanB) / (3.5/sqrt(15))
s$coefficients[2,3]
2 * s$coefficients[2,4]
test$statistic
2 * test$p.value
s$sigma
(1/13) * sum(s$residuals^2)
sqrt((1/13) * sum(s$residuals^2))
sqrt((1/15) * sum(s$residuals^2))
s$r.squared
sqrt((1/13) * sum(s$residuals^2))
se = sqrt((1/13) * sum(s$residuals^2))
SE = se / sqrt(sum(sim_data$values^2))
SE
SE = se / sqrt(1/15 + mean(sim_data$values)^2 / sum(sim_data$values^2))
SE = se * sqrt(1/15 + mean(sim_data$values)^2 / sum(sim_data$values^2))
SE = 3.5 * sqrt(1/15 + mean(sim_data$values)^2 / sum(sim_data$values^2))
SE = se * sqrt(1/15 + mean(sim_data$values)^2 / sum(sim_data$values^2))
s
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
s = summary(lm(values ~ groups, data = sim_data))
s
mean(s$residuals)
round(mean(s$residuals))
t.test(values ~ groups, data = sim_data, var.equal = TRUE)
int_mod = lm(Blood ~ Age + Education + Income + Sex + (Sex:Age) + (Sex*Income), data = hospital)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
int_mod = lm(Blood ~ Age + Education + Income + Sex + (Sex*Age) + (Sex*Income), data = hospital)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
int_mod = lm(Blood ~ Age + Education + Income + Sex + (Sex:Age) + (Sex:Income), data = hospital)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
int_mod
lm(Blood ~ Age + Education + Income + Sex + (Sex*Age) + (Sex*Income), data = hospital)
int_mod2 = lm(Blood ~ Age + Education + Income + Sex + (Sex*Age) + (Sex*Income) + (Income*Age) + (Age*Income*Sex),
data = hospital)
anova(add_mod, int_mod2)$`Pr(>F)`[2]
int_mod2 = lm(Blood ~ Age + Education + Income + Sex + (Sex:Age) + (Sex:Income) + (Income:Age) + (Age:Income:Sex),
data = hospital)
anova(add_mod, int_mod2)$`Pr(>F)`[2]
int_mod2 = lm(Blood ~ Education + (Age*Income*Sex), data = hospital)
anova(add_mod, int_mod2)$`Pr(>F)`[2]
s = summary(lm(values ~ groups, data = sim_data))
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE)
s$coefficients[2,3]
s$coefficients[2,4]
fit = lm(values ~ groups, data = sim_data))
fit = lm(values ~ groups, data = sim_data)
logLik(fit)
fit1 = lm(values ~ 0, data = sim_data)
fit2 = lm(values ~ groups, data = sim_data)
logLik(fit1)
logLik(fit2)
2*logLik(fit2) - logLik(fit1)
1-pchisq(2*(logLik(fit2)-logLik(fit1)), df=30-1)
1-pchisq(2*(logLik(fit2)-logLik(fit1)), df=15-1)
test$statistic
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE)
test$statistic
meanA = mean(sim_data$values[sim_data$groups == 'A'])
meanB = mean(sim_data$values[sim_data$groups == 'B'])
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
meanA = mean(sim_data$values[sim_data$groups == 'A'])
meanB = mean(sim_data$values[sim_data$groups == 'B'])
(meanA - meanB) / sqrt((3.5^2 / 15) + (3.5^2/15))
x = sim_data$values
s2 = (sum((x - meanA)^2) + sum((x - meawnB)^2)) / 28
(s2 = (sum((x - meanA)^2) + sum((x - meawB)^2)) / 28)
(s2 = (sum((x - meanA)^2) + sum((x - meanB)^2)) / 28)
(meanA - meanB) / sqrt((s2 / 15) + (s2/15))
test$statistic
test$statistic
meanA = mean(sim_data[sim_data$groups == 'A']$values)
meanB = mean(sim_data[sim_data$groups == 'B']$values)
meanA = mean(sim_data[sim_data$groups == 'A',]$values)
meanB = mean(sim_data[sim_data$groups == 'B',]$values)
(s2 = (sum((x - meanA)^2) + sum((x - meanB)^2)) / 28)
(s2 = (sum((x - meanA)^2) + sum((x - meanB)^2)) / 28)
(meanA - meanB) / sqrt((s2 / 15)*2)
test$statistic
s$coefficients[2,3]
(meanA - meanB) / sqrt((s2 / 15)*2)
sqrt((meanA - meanB) / sqrt((s2 / 15)*2))
sqrt((meanA - meanB) / (s2 / 15)*2)
(meanA - meanB) / sqrt((s2 / 15)*2)
(meanB - meanA) / sqrt((s2 / 15)*2)
s$sigma
(1/13) * sum(s$residuals^2)
s$sigma
sqrt((1/13) * sum(s$residuals^2))
s$sigma
sqrt((1/15) * sum(s$residuals^2))
s$sigma
sqrt(sum(s$residuals^2) / 13)
sqrt((1/28) * sum(s$residuals^2))
s$sigma
sqrt((1/28) * sum(s$residuals^2)) == s$sigma
s$sigma * sqrt((1/30) + (mean(x)^2)/sum(x^2))
s$sigma * sqrt((1/15) + (mean(x)^2)/sum(x^2))
s$sigma * sqrt((1/30) + (mean(x)^2)/sum(x^2))
s$coefficients
s$coefficients[1,1]
beta0A = s$coefficients[1,1]
beta0B = s$coefficients[2,1]
SE_beta0 = s$sigma * sqrt((1/30) + (mean(x)^2)/sum(x^2))
(beta0A - beta0B) / SE_beta0
(beta0A - (beta0A+beta0B)) / SE_beta0
s$coefficients[2,3]
t = qt(0.05/2, 28)
t = 2*qt(0.05/2, 28)
s$coefficients[2,3]
test$statistic
t = qt(0.05/2, 28)
qt(0.05/2, 28)
qt(0.1/2, 28)
qt(-0.05/2, 28)
qt(0.05/2, 28, lower.tail = TRUE)
qt(0.05/2, 28)
qt(1 - alpha/2, 28)
qt(1 - 0.05/2, 28)
qt(1 - 0.05, 28)
2*qt(1 - 0.05/2, 28)
qt(1 - 0.05/2, 28)
alpha = 1 - 0.05
t = abs(qt(alpha / 2, df = n - 2))
n = 30
t = abs(qt(alpha / 2, df = n - 2))
# deconstructing 95% CI
t_95 = abs(qt(0.05 / 2, df = n - 2))
int_95 = predict(model, newdata, interval = "prediction")
# deconstructing 95% CI
t_95 = abs(qt(0.05 / 2, df = n - 2))
s$coefficients[2,3]
int_mod = lm(Blood ~ Age + Education + Income + Sex + Sex:Age + Sex:Income, data = hospital)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
int_mod = lm(Blood ~ Age + Education + Income + Sex + (Sex:Age) + (Sex:Income), data = hospital)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
int_mod2 = lm(Blood ~ Education + Age * Income * Sex, data = hospital)
p_val = anova(add_mod, int_mod2)$`Pr(>F)`[2]
int_mod2 = lm(Blood ~ Education + (Age*Income*Sex), data = hospital)
p_val = anova(add_mod, int_mod2)$`Pr(>F)`[2]
options(scipen = 1, digits = 4, width = 80, fig.alin = "center")
epa2015 = read.csv("epa2015.csv")
str(epa2015)
(types = levels(epa2015$type))
plot_colors = c(2,3,4)
plot_CO2_vs_horse = function() {
plot(CO2 ~ horse, epa2015, xlab = "Horse power (ft-lb/s)",
ylab = "CO2 (g/mi)", main = "CO2 vs. Horse power", col = plot_colors[type])
legend("topleft", types, cex = 0.75, pch=1, col=plot_colors)
}
fit = lm(CO2 ~ horse, data = epa2015)
plot_CO2_vs_horse()
abline(fit, lwd=3, col="darkorange")
coef(fit)[2]
predict(fit, interval="prediction", level=0.9, newdata=data.frame(horse=148, type="Both"))
fit = lm(CO2 ~ horse + type, data = epa2015)
int_both = coef(fit)[1]
int_car = coef(fit)[1] + coef(fit)[3]
int_truck = coef(fit)[1] + coef(fit)[4]
slope_all = coef(fit)[2]
plot_CO2_vs_horse()
abline(int_both, slope_all, lwd=2, lty=1, col=plot_colors[1])
abline(int_car, slope_all, lwd=2, lty=2, col=plot_colors[2])
abline(int_truck, slope_all, lwd=2, lty=3, col=plot_colors[3])
coef(fit)[2]
predict(fit, level=0.9, interval="prediction", newdata=data.frame(horse=148,type="Both"))
fit = lm(CO2 ~ horse * type, data = epa2015)
int_both = coef(fit)[1]
int_car = coef(fit)[1] + coef(fit)[3]
int_truck = coef(fit)[1] + coef(fit)[4]
slope_both = coef(fit)[2]
slope_car = coef(fit)[2] + coef(fit)[5]
slope_truck = coef(fit)[2] + coef(fit)[6]
plot_CO2_vs_horse()
abline(int_both, slope_both, lwd=2, lty=1, col=plot_colors[1])
abline(int_car, slope_car, lwd=2, lty=2, col=plot_colors[2])
abline(int_truck, slope_truck, lwd=2, lty=3, col=plot_colors[3])
coef(fit)[2] + coef(fit)[5]
predict(fit, level=0.9, interval="prediction", newdata=data.frame(horse=148, type="Both"))
add_mod = lm(CO2 ~ horse + type, data = epa2015)
int_mod = lm(CO2 ~ horse * type, data = epa2015)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
hospital = read.csv("hospital.csv")
str(hospital)
levels(hospital$Education)
levels(hospital$Income)
levels(hospital$Sex)
add_mod = lm(Blood ~ Age + Education + Income + Sex, data = hospital)
names(add_mod$coefficients)
int_mod = lm(Blood ~ Age + Education + Income + Sex + Sex:Age + Sex:Income, data = hospital)
p_val = anova(add_mod, int_mod)$`Pr(>F)`[2]
int_mod2 = lm(Blood ~ Education + Age*Income*Sex, data = hospital)
p_val = anova(add_mod, int_mod2)$`Pr(>F)`[2]
coef(int_mod2)
v = sum(coef(int_mod2)[c(2,6,8,9)])
days_add = lm(Days ~ Pressure + Blood + Rate, data = hospital)
days_int = lm(Days ~ Pressure * Blood * Rate, data = hospital)
analysis = anova(days_add, days_int)
F_val = analysis$F[2]
p_val = analysis$`Pr(>F)`[2]
n = 30
sim_data = data.frame(
groups = c(rep("A", n / 2), rep("B", n / 2)),
values = rep(0, n))
str(sim_data)
set.seed(420)
sim_data$values = rnorm(n, mean = 42, sd = 3.5) # simulate response data
summary(lm(values ~ groups, data = sim_data))
t.test(values ~ groups, data = sim_data, var.equal = TRUE)
num_sims = 300
lm_t = rep(0, num_sims)
lm_p = rep(0, num_sims)
tt_t = rep(0, num_sims)
tt_p = rep(0, num_sims)
set.seed(19840304)
for (i in 1:num_sims) {
sim_data$values = rnorm(n, mean = 42, sd = 3.5)
s = summary(lm(values ~ groups, data = sim_data))
test = t.test(values ~ groups, data = sim_data, var.equal = TRUE)
lm_t[i] = s$coefficients[2,3]
lm_p[i] = s$coefficients[2,4]
tt_t[i] = test$statistic
tt_p[i] = test$p.value
}
mean(lm_t == tt_t)
mean(lm_p == tt_p)
all.equal(lm_p, tt_p)
head(data.frame(lm_t, tt_t))
all.equal(lm_t, tt_t)
all.equal(lm_t * -1, tt_t)
all.equal(lm_t, tt_t * -1)
add_mod = lm(CO2 ~ horse + type, data = epa2015)
int_mod = lm(CO2 ~ horse * type, data = epa2015)
anova(add_mod, int_mod)
v = sum(coef(int_mod2)[c(3,6,7,9)])
data = read.csv("Metro_Interstate_Traffic_Volume.csv-1")
setwd("~/Stuff/stat-420/proj")
data = read.csv("Metro_Interstate_Traffic_Volume.csv-1")
fit = lm(traffic_volume ~ ., data = data)
memory.limit()
data = read.csv("Metro_Interstate_Traffic_Volume.csv-1")
fit = lm(traffic_volume ~ ., data = data)
system('grep MemTotal /proc/meminfo')
system('grep MemTotal /proc/meminfo')
system('free -m')
system('free -m')
student.por = read.csv("student-por.csv")
student.mat = read.csv("student-mat.csv")
View(student.mat)
student.por = read_csv("student-por.csv")
student.por = read.csv("student-por.csv", header = TRUE)
student.mat = read.csv("student-mat.csv", sep = ";")
student.por = read.csv("student-por.csv", sep = ";")
View(student.mat)
student.all = data.frame(student.por, student.mat)
student.all = rbind(student.por, student.mat)
View(student.all)
library("dlply")
install.packages("dlply")
install.packages("plyr")
install.packages("plyr")
library("dlply")
library("plyr")
?dlply
.("a","b")
.("a" = 1,"b" = 1)
list("a" = 1,"b" = 1)
?.
?.(vs + am)
.(vs + am)
expression(.(vs + am))
result<-dlply(student.por,.(school, sex, age, address, famsize, Mjob, Fjob, reason, guardian, traveltime),clustering)
fit = lm(G3 ~ ., data = student.all)
fit$coefficients
fit = lm(G3 ~ Walc, data = student.all)
fit$coefficients
fit = lm(G2 ~ Walc, data = student.all)
fit$coefficients
fit = lm(G1 ~ Walc, data = student.all)
fit$coefficients
fit = lm(G3 ~ Walc + Dalc, data = student.all)
fit$coefficients
fit = lm(G3 ~ Walc + Dalc + health, data = student.all)
fit$coefficients
fit = lm(G3 ~ Dalc + health, data = student.all)
fit$coefficients
fit = lm(G3 ~ Dalc, data = student.all)
fit$coefficients
fit = lm(G3 ~ 0 ~ ., data = student.all)
fit$coefficients
fit = lm(G3 ~ 0 + ., data = student.all)
fit$coefficients
fit = lm(G3 ~ ., data = student.all)
fit$coefficients
fit = lm(G3 ~ nursery, data = student.all)
fit$coefficients
fit = lm(G3 ~ sex + nursery, data = student.all)
fit$coefficients
fit = lm(G3 ~ sex *nursery, data = student.all)
fit$coefficients
fit = lm(G3 ~ sex * nursery * guardian, data = student.all)
fit$coefficients
fit = lm(G3 ~ sex * nursery, data = student.all)
fit$coefficients
fit = lm(G1 ~ sex * nursery, data = student.all)
fit$coefficients
fit = lm(G2 ~ sex * nursery, data = student.all)
fit$coefficients
fit = lm(G2 ~ G2 + sex * nursery, data = student.all)
fit$coefficients
fit = lm(G2 ~ G2 + sex * nursery, data = student.all)
fit = lm(G3 ~ G2 + sex * nursery, data = student.all)
fit$coefficients
student.por = read.csv("data/student-por.csv", sep = ";")
student.por = read.csv("./data/student-por.csv", sep = ";")
student.por = read.csv("data/student-por.csv", sep = ";")
library(readr)
install.packages("reader")
install.packages("readr")
View(student.all)
library(readr)
student_por <- read_delim("data/student-por.csv", ";", escape_double = FALSE, trim_ws = TRUE)
setwd("~/Stuff/stat-420/proj")
library(readr)
student_por <- read_delim("data/student-por.csv", ";", escape_double = FALSE, trim_ws = TRUE)
View(student_por)
View(student_por)
